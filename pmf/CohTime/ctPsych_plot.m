function ctPsych_plot(fun, fits, data, pdat, tbins, cohs, axs, specs, args)%function ctPsych_plot(fun, fits, data, pdat, tbins, cohs, axs, spec, args)%% plots data & fit%% Arguments:%   fun     ... function called by ctPsych_err to generate fits%   fits    ... ML fits of data to given fun%   data, rows are trials, columns are:%       data(1) = coh  (0 .. 99.9%)%       data(2) = time (fractional seconds)%       data(3) = dot dir: left (-1) / right (1)%                   *** IF THIS COLUMN IS GIVEN, PMFS WILL%                           BE RT CHOICE VS SIGNED COH ***%   pdat, rows are trials, columns are:%       pdat(1) = pct or correct (1) / error (0)%       data(2) = (optional) n%   tbins   ... scalar number of bins, or [bin_start bin_end] x bins%   cohs%%   axs ... one or two:%     [ax1]     = PMF vs coh, tbins%     [nan ax2] = PMF vs time, cbins%     [ax1 ax2] = duh%%   specs is cell array of property, value pairs; e.g.,%   'line_style', '--', ...%   'line_width',  1.5, ...%   'font_size',   14,  ...%   'marker_size', 18if nargin < 3  returnend% time binsif size(data,2) == 1    % no time    tbins = [1; 1];    data  = cat(2, data, ones(size(data)));elseif nargin < 5 || isempty(tbins)    if size(data, 2) == 1        tbins = [1; 1];        data  = cat(2, data, ones(size(data)));    else        tbins = [.1:.2:.7;.3:.2:.9];    endelseif isscalar(tbins)    tbins = prctile(data(:,2), linspace(0,100,tbins+1));    tbins = [tbins(1:end-1); tbins(2:end)];end% cohsif nargin < 6 || isempty(cohs)    cohs = nonanunique(data(:,1));     % [0 0.032 0.064 0.128 0.256 0.512 0.999];endbyChoice = 0;if any(cohs<0)     byChoice = 1;elseif size(data, 2) > 2    byChoice = 2;    if size(data, 2) == 4        L0 = data(:,1) == 0;        data(L0,3) = data(L0,4);        pdat(L0,1) = data(L0,3) == 1;        data = data(:,1:3);    end    % make coh, time signed by dot dir    data(:,1) = data(:,1).*data(:,3);    cohs      = unique([-cohs cohs]);else    cohs = setdiff(cohs, 0);end% parse axesif nargin < 7 || isempty(axs)    axs = axes; cla reset; hold on;end% plot specsfont_size   = 14;line_width  = 1.5;line_style  = '-';marker_size = 18;colors      = {'k' 'r' 'g' 'b' 'm' 'c' 'y' };        if nargin >= 8 && iscell(specs) && ~isempty(specs)    while size(specs, 2) >= 2        assignin_here(specs{1}, specs{2});        specs(1:2) = [];    endend% extra argsif nargin < 9 || isempty(args)    args = {};endif size(pdat,1)==size(cohs,1) && size(pdat,2)==size(tbins,2)    % pcts already given in pcor    pcts = pdat*100;    else        % compute pct correct vs coh -OR-    %   pct right choices vs signed coh    pcts = nans(length(cohs), size(tbins,2));        for cc = 1:length(cohs)        % select coherence        Lc = data(:,1) == cohs(cc);                for tt = 1:size(tbins,2)                        % select time and coherence            Ltr = Lc & data(:,2)>=tbins(1,tt) & data(:,2)<=tbins(2,tt);            % compute percent correct            if sum(Ltr) == 0                pcts(cc, tt) = nan;            elseif byChoice == 2 && cohs(cc) < 0                pcts(cc, tt) = sum(pdat(Ltr,1)==0)./sum(Ltr).*100;            elseif size(pdat,2)<2 || all(pdat(Ltr,2)==1)                pcts(cc, tt) = sum(pdat(Ltr,1)==1)./sum(Ltr).*100;            else                pcts(cc, tt) = sum(pdat(Ltr,1).*pdat(Ltr,2))./sum(pdat(Ltr,2))*100;            end        end    endend%%% plot vs coh, binned by time%%if isfinite(axs(1))        axes(axs(1)); hold on;% cla(axs(1),'reset');hold on;    minc = min(cohs);    maxc = max(cohs);     ts = sum(tbins)./2;        if minc < 0        xs = linspace(minc, maxc, 200)';        if size(data,2) < 3            ds = [xs ones(size(xs))];        else            ds = [abs(xs) ones(size(xs)) sign(xs)];        end                else        xs = linspace(0.01, maxc, 100)';        ds = [xs ones(size(xs))];    end    plot(100*[xs(1) xs(end)], [50 50], 'k:');    if ~isempty(fits)        %%%        % show fits        %%%        % loop through the time bins        for tt = 1:size(tbins, 2)                        % set the time            ds(:,2) = ts(tt);                        % plot            ys = 100*feval(fun, fits, ds(:,1:size(data,2)), args{:});            ys(xs<0) = 100-ys(xs<0);            plot(100*xs, ys,  '-', ...                'Color',        colors{mod(tt-1,length(colors))+1}, ...                'LineStyle',    line_style, ...                'LineWidth',    line_width);                    end                ti = find(ys>=81.61,1);        if ~isempty(ti)            plot(100*xs(ti).*[1 1], [45 81.61], 'k--');            plot([0.001 100*xs(ti)], [81.61 81.61], 'k--');        end                lstyle = '.';    else        lstyle = '-';    end    if ~isempty(data)                %%%        % show data        %%%        for tt = 1:size(tbins, 2)            plot(100*cohs, pcts(:,tt), lstyle, ...                'MarkerSize', marker_size, 'Color', colors{mod(tt-1,length(colors))+1});        end    end    if byChoice        plot([0 0], [0 100], 'k:');        axis([100*[minc maxc] 0 100]);        set(gca, 'FontSize', font_size);    else        axis([100*[minc maxc] 45 100]);        set(gca, 'XScale', 'log', 'FontSize', font_size);    end    xlabel('Motion strength (% coherence)');    ylabel('Percent correct');end%%% plot vs time, per coh%%if length(axs) > 1 && isfinite(axs(2))        axes(axs(2)); hold on; % cla(axs(2),'reset');hold on;    ucohs  = cohs(cohs>0);    nucohs = length(ucohs);        maxt = max(tbins(:));%1; %max(cohs);    if size(data,2) == 3        mint = -1;    else        mint = 0.01;    end    if ~isempty(fits) && ~isempty(cohs)                %%%        % show fits        %%%        xs = linspace(mint, maxt, 100)';        ds = [ones(size(xs)) abs(xs) sign(xs+0.0001)];                for cc = 1:nucohs            % get the fits            ds(:,1) = ucohs(cc);            plot(xs, 50+ds(:,3).*(100.*feval(fun, fits, ds(:,1:size(data,2)), ...            args{:}) - 50), '-', ...            'Color',        colors{cc},     ...            'LineStyle',    line_style, ...            'LineWidth',    line_width);        end        lstyle = '.';    else        lstyle = '-';    end    if ~isempty(data)        %%%        % show data        %%%        ts = sum(tbins)./2;        ucohs = cohs(cohs>=0);        for cc = 1:length(ucohs)            Lc      = abs(cohs) == ucohs(cc);            xax     = (sign(cohs(Lc)+0.0001)*ts)';            yax     = pcts(Lc,:)';            yax     = yax(:);            [xax,I] = sort(xax(:));            % plot the data            plot(xax, yax(I), lstyle, 'MarkerSize', marker_size, ...                'Color', colors{cc});        end    end    if byChoice        plot([-maxt maxt], [50 50], 'k:');        plot([0 0], [0 100], 'k:');        axis([-maxt maxt 0 100]);    else        plot([mint maxt], [50 50], 'k:');        axis([mint maxt 45 100]);    end    set(gca, 'FontSize', font_size);    xlabel('Viewing time (Seconds)');    ylabel('Percent correct');end