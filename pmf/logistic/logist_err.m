function err_ = logist_err(fits, fun, data, varargin)% function err_ = logist_err(Xs)% %	Computes the negative of the log likelihood of obtaining Data %    in the global arrays given a logistic model with%    parameters in vector Xs.%	The data is sent in as a global variable (Data) and is in columns %    such that Data(:,1) is ones (which must be%    specified; they represent a bias); Data(:,[2:end-1]) are the values %    (linear coefficients) for the other observed variables; Data(:,m) %	  is a 1 (correct) or a 0 (incorrect).%%  Input:%		Xs ... array of parameters:%			Xs(1) 	 is gamma, the guess rate%			Xs(2) 	 is lambda, the lapse rate%			Xs(3:end) are the coefficients corresponding to%							[3:end-1] columns in Data%%	Returns: err_, which is -log likelihood% use the given function to calculate the ps based%   on the current fitsps = feval(fun, fits, data(:,1:end-1), varargin{:});% Avoid log 0TINY = 0.0001;ps(ps==0) = TINY;ps(ps==1) = 1 - TINY;% Now calculate the joint probability of obtaining the data set conceived as%   a list of Bernoulli trials.  This is just ps for trials = 1 (correct) and%   1-ps for trials of 0 (error).% Note that fmincon searches for minimum, which%   is why we send the negatve of logLerr_ = -sum(log([ps(data(:,end)==1); 1-ps(data(:,end)==0)]));